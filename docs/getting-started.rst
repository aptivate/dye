===============
Getting Started
===============

This basically means setting up your project directory structure and setting
a few paths up.

You should copy the ``example/deploy/`` directory to a ``deploy/`` directory in your
project and edit the ``project_settings.py`` file. You may also want to add
``localtasks.py`` and/or ``localfab.py``

You should then replace the ``manage.py`` in your django directory with the ``manage.py``
from the ``examples/django/`` directory.

Expected Project Structure
==========================

A bare bones project structure would be:

    /apache                    <- contains config files for apache, for different servers
        staging.conf
        production.conf
    /deploy                    <- contains settings and scripts for deployment
        bootstrap.py
        fab.py
        localfab.py            <- optional
        localtasks.py          <- optional
        pip_packages.txt       <- list of python packages to install
        project_settings.py
        tasks.py
        ve_mgr.py
    /django
        /django_project        <- top level for Django project
            manage.py          <- a modified version of manage.py - see examples/
            .ve/               <- contains the virtualenv
            local_settings.py  <- a link to the real local_settings.py.env
            local_settings.py.dev
            local_settings.py.staging
            local_settings.py.production
            manage.py          <- our modified version
            private_settings.py   <- generated by these scripts
            settings.py        <- this will import local_settings.py
            urls.py
    /wsgi                      <- holds WSGI handler
        wsgi_handler.py

A certain amount of the directory structure can be overridden in
``project_settings.py`` but that is not well tested currently.

Requirements
============

DYE tries to minimise what you need installed to start with, but it does expect:

- a unix style environment
- sudo
- python.  Ideally 2.6+, but you can run a basic install against a system
  with python 2.3 if you are not installing Django.

And for most standard deploys it also expects:

- MySQL
- virtualenv

Also, for some python packages that you may want to install in the virtualenv
you will need to install build dependencies - generally the development version
of libraries that the python packages link to.

"Nice to have"
^^^^^^^^^^^^^^

These things will make like easier, but can be worked around if not present.

MySQL Root Password
-------------------

When DYE needs to create databases it needs to access MySQL as root.  To make
this easier, we have a file - ``/root/mysql_root_password`` that contains the
MySQL root password.  It is only readable by root (and on our systems is
generated randomly by puppet during system set up).  So DYE might ask for your
password for ``sudo`` for other tasks, and can then also do what it needs to
with MySQL.

If the file isn't present, it will just ask you for your MySQL root password
when it needs it.
